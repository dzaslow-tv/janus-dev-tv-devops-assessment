name: Build and Deploy

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'

permissions:
  id-token: write
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install dependencies
      working-directory: app
      run: npm ci

    - name: Compile TypeScript
      working-directory: app
      run: |
        npx tsc --build --clean
        npx tsc

  build-and-deploy:
    needs: test
    if: github.ref_type == 'tag' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/')
    runs-on: ubuntu-latest

    env:
      ECR_REPO_DEV: express-app-dev
      ECR_REPO_STAGING: express-app-staging
      ECR_REPO_PROD: express-app
      TF_BACKEND_BUCKET: ${{ vars.TF_BACKEND_BUCKET }}
      TF_BACKEND_DYNAMODB_TABLE: ${{ vars.TF_BACKEND_DYNAMODB_TABLE }}
      TF_BACKEND_ENCRYPT: ${{ vars.TF_BACKEND_ENCRYPT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/GithubActionsPushToECRRepository
          role-session-name: deploy-session

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set environment and repo
        id: set-env
        run: |
          echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
            echo "ECR_REPO=${ECR_REPO_PROD}" >> $GITHUB_ENV
            echo "TF_BACKEND_KEY=express-app-prod/terraform.tfstate" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
            echo "ECR_REPO=${ECR_REPO_STAGING}" >> $GITHUB_ENV
            echo "TF_BACKEND_KEY=express-app-staging/terraform.tfstate" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
            echo "ECR_REPO=${ECR_REPO_DEV}" >> $GITHUB_ENV
            echo "TF_BACKEND_KEY=express-app-dev/terraform.tfstate" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: app
          push: true
          tags: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/GitHubTerraformInfraRole
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Set CDKTF env
        run: |
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >> .env

      - name: Install dependencies
        working-directory: iac
        run: | 
          npm ci
          npm install --no-save cdktf-cli

      - name: CDKTF Plan
        working-directory: iac
        run: |
          npx cdktf get
          npx cdktf plan --context context=${{ env.DEPLOY_ENV }}

      - name: CDKTF Deploy
        working-directory: iac
        run: npx cdktf deploy --auto-approve --context context=${{ env.DEPLOY_ENV }}
